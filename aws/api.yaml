openapi: 3.0.4
info:
  title: LoreLibray API
  description: API for managing users, worlds, collections, entries, and resources.
  version: 1.0.0
servers:
  - url: https://cp13biyxth.execute-api.us-west-2.amazonaws.com/prod
tags:
  - name: user
    description: Operations related to users
  - name: world
    description: Operations related to worlds
  - name: collection
    description: Operations related to collections
  - name: entry
    description: Operations related to entries
  - name: resource
    description: Operations related to resources
  - name: search
    description: Search and browse data
paths:
  /worlds:
    get:
      tags:
        - world
      summary: Get all worlds, paginated
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of worlds to return
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of worlds
          content:
            application/json:
              schema:
                type: object
                properties:
                  worlds:
                    type: array
                    items:
                      $ref: '#/components/schemas/World'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      tags:
        - world
      summary: Create a new world (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '201':
          description: World created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  world:
                    $ref: '#/components/schemas/World'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /{WorldId}:
    get:
      tags:
        - world
      summary: Get a world by ID
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to retrieve
          schema:
            type: string
      responses:
        '200':
          description: World retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '404':
          description: World not found
        '500':
          description: Internal server error
    post:
      tags:
        - world
      summary: Update a world (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '200':
          description: World updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '400':
          description: Bad request
        '404':
          description: World not found
        '500':
          description: Internal server error
    delete:
      tags:
        - world
      summary: Delete a world (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to delete
          schema:
            type: string
      responses:
        '204':
          description: World deleted successfully
        '404':
          description: World not found
        '500':
          description: Internal server error
  /{WorldId}/collections:
    get:
      tags:
        - collection
      summary: Get all collections in a world, paginated
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to retrieve collections from
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of collections to return
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of collections in the world
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      tags:
        - collection
      summary: Create a new collection in a world (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to create the collection in
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection:
                    $ref: '#/components/schemas/Collection'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /{WorldId}/{CollectionId}:
    get:
      tags:
        - collection
      summary: Get a collection by WorldId and CollectionId
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to retrieve the collection from
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Collection retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: Collection not found
        '500':
          description: Internal server error
    post:
      tags:
        - collection
      summary: Update a collection (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to update the collection in
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad request
        '404':
          description: Collection not found
        '500':
          description: Internal server error
    delete:
      tags:
        - collection
      summary: Delete a collection (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to delete the collection from
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to delete
          schema:
            type: string
      responses:
        '204':
          description: Collection deleted successfully
        '404':
          description: Collection not found
        '500':
          description: Internal server error
  /{WorldId}/{CollectionId}/entries:
    get:
      tags:
        - entry
      summary: Get all entries in a collection, paginated
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to retrieve entries from
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to retrieve entries from
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of entries to return
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of entries in the collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      tags:
        - entry
      summary: Create a new entry in a collection (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to create the entry in
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to create the entry in
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  entry:
                    $ref: '#/components/schemas/Entry'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /{WorldId}/{CollectionId}/{EntryId}:
    get:
      tags:
        - entry
      summary: Get an entry by its WorldId, parent CollectionId, and EntryId
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to retrieve the entry from
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to retrieve the entry from
          schema:
            type: string
        - name: EntryId
          in: path
          required: true
          description: ID of the entry to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '404':
          description: Entry not found
        '500':
          description: Internal server error
    post:
      tags:
        - entry
      summary: Update an entry (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to update the entry in
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to update the entry in
          schema:
            type: string
        - name: EntryId
          in: path
          required: true
          description: ID of the entry to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                parentId:
                  type: string
      responses:
        '200':
          description: Entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Bad request
        '404':
          description: Entry not found
        '500':
          description: Internal server error
    delete:
      tags:
        - entry
      summary: Delete an entry (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: WorldId
          in: path
          required: true
          description: ID of the world to delete the entry from
          schema:
            type: string
        - name: CollectionId
          in: path
          required: true
          description: ID of the collection to delete the entry from
          schema:
            type: string
        - name: EntryId
          in: path
          required: true
          description: ID of the entry to delete
          schema:
            type: string
      responses:
        '204':
          description: Entry deleted successfully
        '404':
          description: Entry not found
        '500':
          description: Internal server error
  /signup:
    post:
      tags:
        - user
      summary: Sign up a new user
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /login:
    post:
      tags:
        - user
      summary: Log in a user
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users:
    get:
      tags:
        - user
      summary: Get all users, paginated
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of users to return
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users/{UserId}:
    get:
      tags:
        - user
      summary: Get a user by ID
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: UserId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error
    post:
      tags:
        - user
      summary: Update a user (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: UserId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      tags:
        - user
      summary: Delete a user (requires a user)
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lorelibrary-function/invocations
        payloadFormatVersion: 2.0
      parameters:
        - name: UserId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error  
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        content:
          type: array
          items:
            type: string
        worlds:
          type: array
          items:
            type: string
    World:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        content:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        parentId:
          type: string
        collections:
          type: array
          items:
            type: string
    Collection:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        content:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        parentId:
          type: string
        collections:
          type: array
          items:
            type: string
        entries:
          type: array
          items:
            type: string
    Entry:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        content:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        parentId:
          type: string
    Resource:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        description:
          type: string
    SignIn:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
        username:
          type: string