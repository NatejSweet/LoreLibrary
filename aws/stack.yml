---
Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: The name of the S3 bucket containing the Lambda code
  LambdaCodeS3Key:
    Type: String
    Description: The key (path) to the Lambda code zip file in the S3 bucket
  OpenApiSpecS3Bucket:
    Type: String
    Description: The name of the S3 bucket containing the OpenAPI specification
  OpenApiSpecS3Key:
    Type: String
    Description: The key (path) to the OpenAPI file in the S3 bucket
  JWTSecretParameter:
    Type: String
    Description: The secret key for JWT authentication

Resources:
  ResourcesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: lorelibrary-resources
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  ResourcesBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ResourcesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 's3:GetObject'
            Resource: !Sub
              - arn:aws:s3:::${ResourcesBucket}/*
              - {ResourcesBucket: !Ref ResourcesBucket}

  DataTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: lorelibrary-data
      AttributeDefinitions:
        - AttributeName: PK # Combines entity type and ID (e.g., USER#username, WORLD#worldId)
          AttributeType: S
        - AttributeName: SK # Defines relationships (e.g., WORLD#worldId for collections under a world)
          AttributeType: S
        - AttributeName: GSI1PK # Used for queries like searching by tags or retrieving all worlds for a user
          AttributeType: S
        - AttributeName: GSI1SK # Used for sorting results (e.g., by name or creation date)
          AttributeType: S
      KeySchema:
        - AttributeName: PK # Each item will have attributes like name, tags, content, ownerId, etc., depending on the entity type.
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL        
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LoreLibraryLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: lorelibrary-function
      Runtime: nodejs18.x
      Handler: aws/index.handler
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DataTable
          BUCKET_NAME: !Ref ResourcesBucket
          JWT_SECRET: !Ref JWTSecretParameter

  CustomAuthorizerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: lorelibrary-authorizer
      Runtime: nodejs18.x
      Handler: aws/authorizer.handler
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecretParameter          

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: lorelibrary-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LoreLibraryLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                  - 's3:*'
                Resource: '*'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LoreLibraryLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LoreLibraryApiGateway}/*/*'

  LoreLibraryApiGateway:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      BodyS3Location:
        Bucket: !Ref OpenApiSpecS3Bucket
        Key: !Ref OpenApiSpecS3Key
        
  ApiGatewayAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      AuthorizerPayloadFormatVersion: '2.0'
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {LambdaArn: !GetAtt CustomAuthorizerLambda.Arn}
      EnableSimpleResponses: true
      Name: CustomAuthorizer
    
  ApiGatewayIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {LambdaArn: !GetAtt LoreLibraryLambda.Arn}
      PayloadFormatVersion: '2.0'

  ApiGatewayDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
    DependsOn: ApiGatewayIntegration

  ApiGatewayStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: prod

Outputs:
  WebsiteURL:
    Description: URL for the website hosted on the S3 bucket
    Value: !GetAtt ResourcesBucket.WebsiteURL

  DataTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DataTable

  ApiGatewayURL:
    Description: URL for the API Gateway
    Value: !Sub "https://${LoreLibraryApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
