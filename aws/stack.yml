---
Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: The name of the S3 bucket containing the Lambda code
  LambdaCodeS3Key:
    Type: String
    Description: The key (path) to the Lambda code zip file in the S3 bucket
  OpenApiSpecS3Bucket:
    Type: String
    Description: The name of the S3 bucket containing the OpenAPI specification
  OpenApiSpecS3Key:
    Type: String
    Description: The key (path) to the OpenAPI file in the S3 bucket
  JWTSecretParameter:
    Type: String
    Description: The secret key for JWT authentication
  Env:
    Type: String
    Default: ""
    AllowedValues:
      - -dev
      - ""
    Description: The environment for the deployment (-dev or none)

Resources:
  ResourcesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub lorelibrary-resources${Env}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  ResourcesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ResourcesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "s3:GetObject"
            Resource: !Sub
              - arn:aws:s3:::${ResourcesBucket}/*
              - { ResourcesBucket: !Ref ResourcesBucket }

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub lorelibrary-user-pool${Env}
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpLambda.Arn
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub lorelibrary-client${Env}
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://lore-library.vercel.app/callback
      LogoutURLs:
        - https://lore-library.vercel.app/logout
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub lorelibrary-identity-pool${Env}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Sub lorelibrary-authenticated-policy${Env}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource: "*"

  DataTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub lorelibrary-data${Env}
      AttributeDefinitions:
        - AttributeName: PK # Combines entity type and ID (e.g., WORLD#, or COLLECTION#worldId)
          AttributeType: S
        - AttributeName: SK # Defines relationships (e.g., COLLECTION#worldId)
          AttributeType: S
        - AttributeName: GSI1PK # Used for queries like searching by tags or retrieving all worlds for a user
          AttributeType: S
        - AttributeName: GSI1SK # Used for sorting results (e.g., by name or creation date)
          AttributeType: S
      KeySchema:
        - AttributeName: PK # Each item will have attributes like name, tags, content, ownerId, etc., depending on the entity type.
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  UserTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub lorelibrary-user${Env}
      AttributeDefinitions:
        - AttributeName: PK # User ID
          AttributeType: S
        - AttributeName: SK # User details (e.g., USER#username)
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LoreLibraryLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub lorelibrary-lambda${Env}
      Runtime: nodejs22.x
      Handler: aws/index.handler
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt LambdaExecutionRole.Arn
      _dev:
        Variables:
          DATA_TABLE: !Ref DataTable
          USER_TABLE: !Ref UserTable
          BUCKET_NAME: !Ref ResourcesBucket
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Timeout: 7 # seconds

  CustomAuthorizerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub lorelibrary-authorizer${Env}
      Runtime: nodejs22.x
      Handler: aws/authorizer.handler
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Role: !GetAtt LambdaExecutionRole.Arn
      _dev:
        Variables:
          DATA_TABLE: !Ref DataTable
          USER_TABLE: !Ref UserTable
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Timeout: 5 # seconds
          
  PreSignUpLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: !Sub lorelibrary-pre-signup${Env}
        Runtime: nodejs22.x
        Handler: index.handler
        Code:
          ZipFile: |
            exports.handler = async (event) => {
              event.response.autoConfirmUser = true;
              if (event.request.userAttributes.hasOwnProperty("email")) {
                event.response.autoVerifyEmail = true;
              }
              if (event.request.userAttributes.hasOwnProperty("phone_number")) {
                event.response.autoVerifyPhone = true;
              }
              return event;
            };
        Role: !GetAtt 
          LambdaExecutionRole.Arn
        Timeout: 4 # seconds

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub lorelibrary-lambda-role${Env}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub lorelibrary-lambda-policy${Env}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                  - "s3:*"
                  - "cognito-idp:*"      
                  - "cognito-idp:AdminCreateUser"
                  - "cognito-idp:AdminUpdateUserAttributes"
                  - "cognito-idp:AdminConfirmSignUp"
                  - "cognito-idp:ListUsers"
                Resource: "*"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LoreLibraryLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LoreLibraryApiGateway}/*/*"
  
  PreSignUpLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt PreSignUpLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"

  AuthenticationInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt CustomAuthorizerLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LoreLibraryApiGateway}/*/*"

  LoreLibraryApiGateway:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      BodyS3Location:
        Bucket: !Ref OpenApiSpecS3Bucket
        Key: !Ref OpenApiSpecS3Key

  # LorelibraryAuthorizer:
  #   Type: 'AWS::ApiGatewayV2::Authorizer'
  #   Properties:
  #     ApiId: !Ref LoreLibraryApiGateway
  #     AuthorizerPayloadFormatVersion: '2.0'
  #     AuthorizerType: REQUEST
  #     AuthorizerUri: !Sub
  #       - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #       - {LambdaArn: !GetAtt CustomAuthorizerLambda.Arn}
  #     EnableSimpleResponses: true
  #     Name: lorelibrary-gateway-authorizer

  ApiGatewayCognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      Name: !Sub lorelibrary-cognito-authorizer${Env}
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"

  ApiGatewayIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - { LambdaArn: !GetAtt LoreLibraryLambda.Arn }
      PayloadFormatVersion: "2.0"

  ApiGatewayDeployment:
    Type: "AWS::ApiGatewayV2::Deployment"
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
    DependsOn: ApiGatewayIntegration

  ApiGatewayStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref LoreLibraryApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: prod
   
Outputs:
  WebsiteURL:
    Description: URL for the website hosted on the S3 bucket
    Value: !GetAtt ResourcesBucket.WebsiteURL

  DataTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DataTable

  UserTableName:
    Description: Name of the user DynamoDB table
    Value: !Ref UserTable

  ApiGatewayURL:
    Description: URL for the API Gateway
    Value: !Sub "https://${LoreLibraryApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
